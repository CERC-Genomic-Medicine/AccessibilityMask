import pandas as pd
import sys
import argparse

argparser = argparse.ArgumentParser(description = 
 'This script makes bed files from depth files generated by coverage pipeline!')

argparser.add_argument('-i', '--input-file', metavar = 'file', dest = 'in_path', type = str, required = True, help = 'File containing coverage of each variant and percent of individuals havingthat variant with specified coverage.')
argparser.add_argument('-dp', '--min-dp', metavar = 'number', dest = 'in_depth', type = int, required = True, help = 'Minimum depth considering as high coverage threshold.')
argparser.add_argument('-ind', '--pct-ind', metavar = 'number', dest = 'in_pct', type = int, required = True, help = 'Minimum percentile of individuals with the mentioned depth threshold.')
argparser.add_argument('-ic', '--in-chrom', metavar = 'string', dest = 'in_chrom', type = str, required = True, help = 'Input chromosome number.')
argparser.add_argument('-o', '--output', metavar = 'file', dest = 'out_file_path', type = str, required = True, help = 'Output bed file containing high coverage files.')

def load_coverage_file(depth_path = "/home/sayahian/scratch/TOPMed_Coverage_data/chr20.BRAVO_TOPMed_coverage_hg38.txt", minimal_percentile_of_IND = 1, minimal_DP = "10X"):
    list_df = []
    chunksize = 10 ** 6

    with pd.read_csv(depth_path, chunksize=chunksize, sep = "\t") as reader:
        for chunk in reader:
            min_dp = "PCT_INDV_OVER_" + minimal_DP
            chunk = chunk[chunk[min_dp] == minimal_percentile_of_IND]
            chunk = chunk[["CHROM", "BP"]]
            list_df.append(chunk)
    all_pos = pd.concat(list_df).reset_index(drop=True)
    all_pos = all_pos[["CHROM", "BP"]]
    return all_pos["BP"]

def interval_extract(list, chrom):
    list = sorted(set(list))
    range_start = previous_number = list[0]
  
    for number in list[1:]:
        if number == previous_number + 1:
            previous_number = number
        else:
            yield {"CHROM": chrom, "start" : range_start, "end" : previous_number}
            range_start = previous_number = number
    
    yield {"CHROM": chrom, "start" : range_start, "end" : previous_number}
    

if __name__ == "__main__":
    args = argparser.parse_args()
    depth_file = args.in_path
    min_depth = args.in_depth
    pct_ind = args.in_pct
    out_file_path = args.out_file_path
    chrom = args.in_chrom
    intervals = pd.DataFrame(interval_extract(load_coverage_file(depth_file, pct_ind, min_depth), chrom))
    intervals.to_csv("high_coverage_regions.bed", sep="/t")
    exit()
    